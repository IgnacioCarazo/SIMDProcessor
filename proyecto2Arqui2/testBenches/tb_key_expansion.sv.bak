module tb_key_expansion;            // Parameters for the testbench
    parameter regSize = 32;         // Size of each register (32 bits)
    parameter vecSize = 4;          // Number of registers (4 words for AES-128)

    // Declare input and output signals for the key_expansion module
    logic [vecSize-1:0][regSize-1:0] key;                // Input key as a 2D array (4 x 32 bits)
    logic [10:0][vecSize-1:0][regSize-1:0] round_keys;  // Output round keys (11 keys for AES-128)

    // Instantiate the key_expansion module
    key_expansion #(regSize, vecSize) uut (
        .key(key),
        .round_keys(round_keys)
    );

    // Initial block to apply test vectors
    initial begin
        // Test case: Input key
        key[0] = 32'h00000000;   // First word of the key
        key[1] = 32'h00000000;   // Second word of the key
        key[2] = 32'h00000000;   // Third word of the key
        key[3] = 32'h00000000;   // Fourth word of the key
        
        // Wait for a small delay for the output to stabilize
        #10;

        // Assertions for expected output values (round keys)
        assert(round_keys[0][0] == 32'h00000000) else $error("Test Case 1 Failed: Expected round_keys[0][0] = 00000000 but got %h", round_keys[0][0]);
        assert(round_keys[0][1] == 32'h00000000) else $error("Test Case 1 Failed: Expected round_keys[0][1] = 00000000 but got %h", round_keys[0][1]);
        assert(round_keys[0][2] == 32'h00000000) else $error("Test Case 1 Failed: Expected round_keys[0][2] = 00000000 but got %h", round_keys[0][2]);
        assert(round_keys[0][3] == 32'h00000000) else $error("Test Case 1 Failed: Expected round_keys[0][3] = 00000000 but got %h", round_keys[0][3]);
        
        // Add expected outputs for subsequent round keys (1 to 10) based on key expansion algorithm
        //assert(round_keys[1][0] == 32'h01000000) else $error("Test Case 1 Failed: Expected round_keys[1][0] = 01000000 but got %h", round_keys[1][0]);
        //assert(round_keys[1][1] == 32'h00000000) else $error("Test Case 1 Failed: Expected round_keys[1][1] = 00000000 but got %h", round_keys[1][1]);
        //assert(round_keys[1][2] == 32'h00000000) else $error("Test Case 1 Failed: Expected round_keys[1][2] = 00000000 but got %h", round_keys[1][2]);
        //assert(round_keys[1][3] == 32'h00000000) else $error("Test Case 1 Failed: Expected round_keys[1][3] = 00000000 but got %h", round_keys[1][3]);

        // Continue adding assertions for round_keys[2] through round_keys[10] here...

        // Finish the simulation
        $finish;
    end
endmodule